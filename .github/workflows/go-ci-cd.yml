name: Go CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        options: --health-cmd="curl --silent --fail localhost:27017" --health-timeout=5s --health-retries=5 --health-start-period=10s --publish 27017:27017
        # This starts a MongoDB container on the default port 27017

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set up Go environment
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21' 
  
    # Set up GolangCI-Lint
    - name: Set up GolangCI-Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: 'v1.50.0'  

    # Run Linter
    - name: Run Linter
      run: golangci-lint run --timeout 5m

    # Install dependencies
    - name: Install Dependencies
      run: go mod tidy

    # Run unit tests (including MongoDB-related tests)
    - name: Run Tests
      run: |
        # Wait for MongoDB to be ready
        echo "Waiting for MongoDB to start..."
        sleep 10  # Ensure MongoDB is fully ready

        # Run your tests
        go test ./... -v
      env:
        MONGO_URI: ${{ secrets.MONGO_URI }}  # MongoDB URI stored in GitHub secrets

    # Build the application
    - name: Build Application
      run: go build -o myapp ./cmd/main.go

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Deploy only from the main branch

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: 'main'

    # Set up Kubernetes client (if deploying to Kubernetes)
    - name: Set up Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.23.0'
